#include <iostream>
#include <vector>

class SimplePoint {
public:
    double x, y;
    SimplePoint(double x = 0, double y = 0) : x(x), y(y) {}
};

class Shape {
public:
    virtual void draw() const = 0;
    virtual void erase() const = 0;
    virtual void move(double dx, double dy) {}
    virtual void rotate(double angle, const SimplePoint& origin) {}
    virtual ~Shape() {} // Виртуальный деструктор
};

class Parallelogram : public Shape {
protected:
    SimplePoint vertices[4];

    void drawVertices() const {
        for (const auto& vertex : vertices) {
            std::cout << "(" << vertex.x << ", " << vertex.y << ") ";
        }
    }

public:
    Parallelogram(const SimplePoint& v1, const SimplePoint& v2, const SimplePoint& v3, const SimplePoint& v4) {
        vertices[0] = v1;
        vertices[1] = v2;
        vertices[2] = v3;
        vertices[3] = v4;
    }

    Parallelogram() : vertices{SimplePoint(), SimplePoint(), SimplePoint(), SimplePoint()} {}

    void draw() const override {
        std::cout << "Рисуем параллелограмм: ";
        drawVertices();
        std::cout << std::endl;
    }

    void erase() const override {
        std::cout << "Удаляем параллелограмм: ";
        drawVertices();
        std::cout << std::endl;
    }
};

// Прямоугольник
class Rectangle : public Parallelogram {
public:
    Rectangle(const SimplePoint& v1, const SimplePoint& v2, const SimplePoint& v3, const SimplePoint& v4)
        : Parallelogram(v1, v2, v3, v4) {}

    void draw() const override {
        std::cout << "Рисуем прямоугольник: ";
        drawVertices();
        std::cout << std::endl;
    }

    void erase() const override {
        std::cout << "Удаляем прямоугольник: ";
        drawVertices();
        std::cout << std::endl;
    }
};

// Ромб
class Rhombus : public Parallelogram {
public:
    Rhombus(const SimplePoint& v1, const SimplePoint& v2, const SimplePoint& v3, const SimplePoint& v4)
        : Parallelogram(v1, v2, v3, v4) {}

    void draw() const override {
        std::cout << "Рисуем ромб: ";
        drawVertices();
        std::cout << std::endl;
    }

    void erase() const override {
        std::cout << "Удаляем ромб: ";
        drawVertices();
        std::cout << std::endl;
    }
};

// Квадрат
class Square : public Shape {
private:
    Rectangle rectangle; // Используем композицию
    Rhombus rhombus;

public:
    Square(const SimplePoint& v1, const SimplePoint& v2, const SimplePoint& v3, const SimplePoint& v4)
        : rectangle(v1, v2, v3, v4), rhombus(v1, v2, v3, v4) {}

    void draw() const override {
        std::cout << "Рисуем квадрат: ";
        rectangle.draw(); // Рисуем через объект прямоугольника
    }

    void erase() const override {
        std::cout << "Удаляем квадрат: ";
        rectangle.erase(); // Удаляем через объект прямоугольника
    }
};

class Line : public Shape {
private:
    SimplePoint start, end;

public:
    Line(const SimplePoint& start, const SimplePoint& end) : start(start), end(end) {}

    void draw() const override {
        std::cout << "Рисуем линию: (" << start.x << ", " << start.y << ") - ("
                  << end.x << ", " << end.y << ")" << std::endl;
    }

    void erase() const override {
        std::cout << "Удаляем линию: (" << start.x << ", " << start.y << ") - (" 
                  << end.x << ", " << end.y << ")" << std::endl;
    }
};

int main() 
{
    setlocale(LC_ALL, "Russian");

    SimplePoint origin(0, 0);
    SimplePoint rA(1, 1), rB(5, 1), rC(5, 3), rD(1, 3);
    SimplePoint sA(6, 4), sB(8, 4), sC(8, 6), sD(6, 6);
    SimplePoint lA(0, 0), lB(2, 2);
    SimplePoint pA(-4, 1), pB(-1, 1), pC(0, 3), pD(-3, 3);
    SimplePoint rhA(3, -2), rhB(5, -4), rhC(3, -6), rhD(1, -4);

    std::cout << "---Демонстрация---" << std::endl;
    
    std::vector<Shape*> shapes;
    shapes.push_back(new Line(lA, lB));
    shapes.push_back(new Rectangle(rA, rB, rC, rD));
    shapes.push_back(new Square(sA, sB, sC, sD));
    shapes.push_back(new Parallelogram(pA, pB, pC, pD));
    shapes.push_back(new Rhombus(rhA, rhB, rhC, rhD));

    // Рисуем все фигуры
    for (const auto& shape : shapes) {
        shape->draw();
    }

    // Удаляем все фигуры
    for (const auto& shape : shapes) {
        shape->erase();
        delete shape; // Освобождаем память
    }

    return 0;
}
